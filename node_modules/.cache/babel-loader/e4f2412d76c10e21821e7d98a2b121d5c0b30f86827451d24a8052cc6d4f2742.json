{"ast":null,"code":"var _jsxFileName = \"/Users/nitro/Desktop/React-Investment Calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./Components/Header\";\nimport FormInput from \"./Components/FormInput\";\nimport Investment from \"./Components/Investment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setInputData] = useState(null);\n  // const calculateHandler = (userInput) => {\n  //   // Should be triggered when form is submitted\n  //   // You might not directly want to bind it to the submit event on the form though...\n  //   const yearlyData = []; // per-year results\n  //   let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput['expected-return'] / 100;\n  //   const duration = +userInput['duration'];\n  //\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n  //   // do something with yearlyData ...\n  // };\n\n  const saveInputData = userInput => {\n    setInputData(userInput);\n    console.log(userInput);\n  };\n\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n  const yearlyData = []; // per-year results\n  // if (userInput) {\n  //   let currentSavings = +userInput[currentSavings]; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput[yearlyContribution]; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput[expectedReturn] / 100;\n  //   const duration = +userInput[duration];\n  //\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n  //   // do something with yearlyData ...\n  //\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n      onSaveInputData: saveInputData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No investment calculated yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(Investment, {\n      data: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7jWToPTjrl4d4GNg5qq6l8rmcTA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","FormInput","Investment","jsxDEV","_jsxDEV","App","_s","userInput","setInputData","saveInputData","console","log","yearlyData","children","fileName","_jsxFileName","lineNumber","columnNumber","onSaveInputData","data","_c","$RefreshReg$"],"sources":["/Users/nitro/Desktop/React-Investment Calculator/src/App.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport Header from \"./Components/Header\";\nimport FormInput from \"./Components/FormInput\";\nimport Investment from \"./Components/Investment\";\n\nfunction App() {\n\n\n  const [userInput, setInputData]=useState(null)\n  // const calculateHandler = (userInput) => {\n  //   // Should be triggered when form is submitted\n  //   // You might not directly want to bind it to the submit event on the form though...\n  //   const yearlyData = []; // per-year results\n  //   let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput['expected-return'] / 100;\n  //   const duration = +userInput['duration'];\n  //\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n  //   // do something with yearlyData ...\n  // };\n\n  const saveInputData = (userInput) =>{\n    setInputData(userInput)\n      console.log(userInput)\n  }\n\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n // if (userInput) {\n //   let currentSavings = +userInput[currentSavings]; // feel free to change the shape of this input object!\n //   const yearlyContribution = +userInput[yearlyContribution]; // as mentioned: feel free to change the shape...\n //   const expectedReturn = +userInput[expectedReturn] / 100;\n //   const duration = +userInput[duration];\n //\n //   // The below code calculates yearly results (total savings, interest etc)\n //   for (let i = 0; i < duration; i++) {\n //     const yearlyInterest = currentSavings * expectedReturn;\n //     currentSavings += yearlyInterest + yearlyContribution;\n //     yearlyData.push({\n //       // feel free to change the shape of the data pushed to the array!\n //       year: i + 1,\n //       yearlyInterest: yearlyInterest,\n //       savingsEndOfYear: currentSavings,\n //       yearlyContribution: yearlyContribution,\n //     });\n //   }\n //   // do something with yearlyData ...\n //\n // }\n\n  return (\n    <div>\n        <Header/>\n        <FormInput onSaveInputData={saveInputData}/>\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {!userInput && <p>No investment calculated yet</p>}\n      {userInput && <Investment data={yearlyData}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAGb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAACT,QAAQ,CAAC,IAAI,CAAC;EAC9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMU,aAAa,GAAIF,SAAS,IAAI;IAClCC,YAAY,CAACD,SAAS,CAAC;IACrBG,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;EAC1B,CAAC;;EAEC;EACA;EACA,MAAMK,UAAU,GAAG,EAAE,CAAC,CAAC;EAC1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEC,oBACER,OAAA;IAAAS,QAAA,gBACIT,OAAA,CAACJ,MAAM;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTb,OAAA,CAACH,SAAS;MAACiB,eAAe,EAAET;IAAc;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAG7C,CAACV,SAAS,iBAAIH,OAAA;MAAAS,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACjDV,SAAS,iBAAIH,OAAA,CAACF,UAAU;MAACiB,IAAI,EAAEP;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV;AAACX,EAAA,CApEQD,GAAG;AAAAe,EAAA,GAAHf,GAAG;AAsEZ,eAAeA,GAAG;AAAC,IAAAe,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}