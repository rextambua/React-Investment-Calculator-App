{"ast":null,"code":"var _jsxFileName = \"/Users/nitro/Desktop/React-Investment Calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./Components/Header\";\nimport FormInput from \"./Components/FormInput\";\nimport Investment from \"./Components/Investment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setInputData] = useState(null);\n  const saveInputData = userInput => {\n    setInputData(userInput);\n    console.log(userInput);\n  };\n  const yearlyData = [];\n  if (userInput) {\n    let currentSavings = +userInput[0];\n    const yearlyContribution = +userInput[1];\n    const expectedReturn = +userInput[2] / 100;\n    const duration = +userInput[1];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    // do something with yearlyData ...\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n      onSaveInputData: saveInputData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No investment calculated yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(Investment, {\n      data: yearlyData,\n      initialInvestment: userInput[1]\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7jWToPTjrl4d4GNg5qq6l8rmcTA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","FormInput","Investment","jsxDEV","_jsxDEV","App","_s","userInput","setInputData","saveInputData","console","log","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onSaveInputData","data","initialInvestment","_c","$RefreshReg$"],"sources":["/Users/nitro/Desktop/React-Investment Calculator/src/App.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport Header from \"./Components/Header\";\nimport FormInput from \"./Components/FormInput\";\nimport Investment from \"./Components/Investment\";\n\nfunction App() {\n\n\n  const [userInput, setInputData]=useState(null)\n\n  const saveInputData = (userInput) =>{\n    setInputData(userInput)\n      console.log(userInput)\n  }\n\n\n    const yearlyData = [];\n if (userInput) {\n   let currentSavings = +userInput[0];\n   const yearlyContribution = +userInput[1];\n   const expectedReturn = +userInput[2] / 100;\n   const duration = +userInput[1];\n\n   // The below code calculates yearly results (total savings, interest etc)\n   for (let i = 0; i < duration; i++) {\n     const yearlyInterest = currentSavings * expectedReturn;\n     currentSavings += yearlyInterest + yearlyContribution;\n     yearlyData.push({\n       // feel free to change the shape of the data pushed to the array!\n       year: i + 1,\n       yearlyInterest: yearlyInterest,\n       savingsEndOfYear: currentSavings,\n       yearlyContribution: yearlyContribution,\n     });\n   }\n   // do something with yearlyData ...\n\n }\n\n  return (\n    <div>\n        <Header/>\n        <FormInput onSaveInputData={saveInputData}/>\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {!userInput && <p>No investment calculated yet</p>}\n      {userInput && <Investment data={yearlyData} initialInvestment={userInput[1]}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAGb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAACT,QAAQ,CAAC,IAAI,CAAC;EAE9C,MAAMU,aAAa,GAAIF,SAAS,IAAI;IAClCC,YAAY,CAACD,SAAS,CAAC;IACrBG,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;EAC1B,CAAC;EAGC,MAAMK,UAAU,GAAG,EAAE;EACxB,IAAIL,SAAS,EAAE;IACb,IAAIM,cAAc,GAAG,CAACN,SAAS,CAAC,CAAC,CAAC;IAClC,MAAMO,kBAAkB,GAAG,CAACP,SAAS,CAAC,CAAC,CAAC;IACxC,MAAMQ,cAAc,GAAG,CAACR,SAAS,CAAC,CAAC,CAAC,GAAG,GAAG;IAC1C,MAAMS,QAAQ,GAAG,CAACT,SAAS,CAAC,CAAC,CAAC;;IAE9B;IACA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACA;EAEF;;EAEC,oBACEV,OAAA;IAAAkB,QAAA,gBACIlB,OAAA,CAACJ,MAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTtB,OAAA,CAACH,SAAS;MAAC0B,eAAe,EAAElB;IAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAG7C,CAACnB,SAAS,iBAAIH,OAAA;MAAAkB,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACjDnB,SAAS,iBAAIH,OAAA,CAACF,UAAU;MAAC0B,IAAI,EAAEhB,UAAW;MAACiB,iBAAiB,EAAEtB,SAAS,CAAC,CAAC;IAAE;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEV;AAACpB,EAAA,CA5CQD,GAAG;AAAAyB,EAAA,GAAHzB,GAAG;AA8CZ,eAAeA,GAAG;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}