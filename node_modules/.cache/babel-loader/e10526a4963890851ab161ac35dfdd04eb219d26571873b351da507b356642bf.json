{"ast":null,"code":"var _jsxFileName = \"/Users/nitro/Desktop/React-Investment Calculator/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Header from \"./Components/Header\";\nimport FormInput from \"./Components/FormInput\";\nimport Investment from \"./Components/Investment\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // const DummyData = [{\n  //   currentSaving: \"1\",\n  //   expectedInterest: \"2\",\n  //   investmentDuration: \"2\",\n  //   yearlySaving: \"2\"\n  // },\n  //   {\n  //     currentSaving: \"15\",\n  //     expectedInterest: \"25\",\n  //     investmentDuration: \"25\",\n  //     yearlySaving: \"25\"\n  //   }]\n\n  const [userInput, setInputData] = useState(null);\n  // const calculateHandler = (userInput) => {\n  //   // Should be triggered when form is submitted\n  //   // You might not directly want to bind it to the submit event on the form though...\n  //   const yearlyData = []; // per-year results\n  //   let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput['expected-return'] / 100;\n  //   const duration = +userInput['duration'];\n  //\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n  //   // do something with yearlyData ...\n  // };\n\n  const saveInputData = userInput => {\n    setInputData(userInput);\n  };\n  console.log(userInput);\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n  const yearlyData = []; // per-year results\n  if (userInput) {\n    let currentSavings = +userInput[currentSavings]; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    // do something with yearlyData ...\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(FormInput, {\n      onSaveInputData: saveInputData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), !userInput && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No investment calculated yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 22\n    }, this), userInput && /*#__PURE__*/_jsxDEV(Investment, {\n      data: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"7jWToPTjrl4d4GNg5qq6l8rmcTA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Header","FormInput","Investment","jsxDEV","_jsxDEV","App","_s","userInput","setInputData","saveInputData","console","log","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","onSaveInputData","data","_c","$RefreshReg$"],"sources":["/Users/nitro/Desktop/React-Investment Calculator/src/App.js"],"sourcesContent":["import React, {useState} from \"react\";\nimport Header from \"./Components/Header\";\nimport FormInput from \"./Components/FormInput\";\nimport Investment from \"./Components/Investment\";\n\nfunction App() {\n  // const DummyData = [{\n  //   currentSaving: \"1\",\n  //   expectedInterest: \"2\",\n  //   investmentDuration: \"2\",\n  //   yearlySaving: \"2\"\n  // },\n  //   {\n  //     currentSaving: \"15\",\n  //     expectedInterest: \"25\",\n  //     investmentDuration: \"25\",\n  //     yearlySaving: \"25\"\n  //   }]\n\n  const [userInput, setInputData]=useState(null)\n  // const calculateHandler = (userInput) => {\n  //   // Should be triggered when form is submitted\n  //   // You might not directly want to bind it to the submit event on the form though...\n  //   const yearlyData = []; // per-year results\n  //   let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  //   const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  //   const expectedReturn = +userInput['expected-return'] / 100;\n  //   const duration = +userInput['duration'];\n  //\n  //   // The below code calculates yearly results (total savings, interest etc)\n  //   for (let i = 0; i < duration; i++) {\n  //     const yearlyInterest = currentSavings * expectedReturn;\n  //     currentSavings += yearlyInterest + yearlyContribution;\n  //     yearlyData.push({\n  //       // feel free to change the shape of the data pushed to the array!\n  //       year: i + 1,\n  //       yearlyInterest: yearlyInterest,\n  //       savingsEndOfYear: currentSavings,\n  //       yearlyContribution: yearlyContribution,\n  //     });\n  //   }\n  //   // do something with yearlyData ...\n  // };\n\n  const saveInputData = (userInput) =>{\n    setInputData(userInput)\n  }\n    console.log(userInput)\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n    const yearlyData = []; // per-year results\n if (userInput) {\n   let currentSavings = +userInput[currentSavings]; // feel free to change the shape of this input object!\n   const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n   const expectedReturn = +userInput['expected-return'] / 100;\n   const duration = +userInput['duration'];\n\n   // The below code calculates yearly results (total savings, interest etc)\n   for (let i = 0; i < duration; i++) {\n     const yearlyInterest = currentSavings * expectedReturn;\n     currentSavings += yearlyInterest + yearlyContribution;\n     yearlyData.push({\n       // feel free to change the shape of the data pushed to the array!\n       year: i + 1,\n       yearlyInterest: yearlyInterest,\n       savingsEndOfYear: currentSavings,\n       yearlyContribution: yearlyContribution,\n     });\n   }\n   // do something with yearlyData ...\n\n }\n\n  return (\n    <div>\n        <Header/>\n        <FormInput onSaveInputData={saveInputData}/>\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {!userInput && <p>No investment calculated yet</p>}\n      {userInput && <Investment data={yearlyData}/>}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAACT,QAAQ,CAAC,IAAI,CAAC;EAC9C;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMU,aAAa,GAAIF,SAAS,IAAI;IAClCC,YAAY,CAACD,SAAS,CAAC;EACzB,CAAC;EACCG,OAAO,CAACC,GAAG,CAACJ,SAAS,CAAC;EACtB;EACA;EACA,MAAMK,UAAU,GAAG,EAAE,CAAC,CAAC;EAC1B,IAAIL,SAAS,EAAE;IACb,IAAIM,cAAc,GAAG,CAACN,SAAS,CAACM,cAAc,CAAC,CAAC,CAAC;IACjD,MAAMC,kBAAkB,GAAG,CAACP,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMQ,cAAc,GAAG,CAACR,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMS,QAAQ,GAAG,CAACT,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACA;EAEF;;EAEC,oBACEV,OAAA;IAAAkB,QAAA,gBACIlB,OAAA,CAACJ,MAAM;MAAAuB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTtB,OAAA,CAACH,SAAS;MAAC0B,eAAe,EAAElB;IAAc;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,EAG7C,CAACnB,SAAS,iBAAIH,OAAA;MAAAkB,QAAA,EAAG;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,EACjDnB,SAAS,iBAAIH,OAAA,CAACF,UAAU;MAAC0B,IAAI,EAAEhB;IAAW;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV;AAACpB,EAAA,CA9EQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAgFZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}